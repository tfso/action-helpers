name: 'Get version'
description: ''

inputs:
  GITHUB_TOKEN:
    description: 'Github Token'
    required: false
  DEFAULT_BUMP:
    description: ''
    required: false
    default: 'patch'
  MAJOR: 
    description: Limit versioning within a major version
    required: false
  INITIAL_VERSION:
    description: Initial version if there isn't any tags
    required: false
    default: 0.0.0
  INITIAL_BUILDNUMBER:
    description: If not defined, the first prerelease build-number will be set as workflow run number
    required: false
  WITH_V:
    description: Tag version with v character.
    required: false
    default: 'false'
  TRUNCATE_PRERELEASE:
    description: Truncate prerelease suffix for PR builds where the branchname will be truncated to the first word ('feature/my-feature' will be 'feature')
    required: false
    default: 'false'
  PRERELEASE_SUFFIX:
    description: Prerelease suffix for your versions, default to your branchname. Note this will only be used if a it's a prerelease
    required: false
  
  DEFAULT_BRANCH:
    description: Default main branch, other than this branch will be treated as a prerelease
    required: false
    default: ${{ github.event.repository.default_branch }}
  NODE_VERSION: 
    description: node version, defaults to 18
    required: false
    default: '18'
  

outputs:
  new_tag:
    description: Generated tag
    value: ${{ steps.tag.outputs.with_v }}${{ steps.tag.outputs.new_tag }}
  tag:
    description: The latest tag before running this action
    value: ${{ steps.latest_tag.outputs.pre_tag || steps.latest_tag.outputs.tag }}
  major:
    description: Major version of the generated tag
    value: ${{ steps.tag.outputs.major }}
  major_tag:
    description: Major tag version of the generated tag, eg v1, 1
    value: ${{ steps.tag.outputs.with_v }}${{ steps.tag.outputs.major }}
  minor:
    description: Minor version of the generated tag
    value:  ${{ steps.tag.outputs.minor }}
  minor_tag:
    description: Minor tag version of the generated tag, eg v1.2, 1.2
    value: ${{ steps.tag.outputs.with_v }}${{ steps.tag.outputs.major }}.${{ steps.tag.outputs.minor }}
  part:
    description: The part of version which was bumped
    value: ${{ steps.tag.outputs.part }}
  prerelease:
    description: Prerelease suffix
    value: ${{ contains(steps.tag.outputs.is_prerelease, '1') && steps.branch.outputs.prerelease || '' }}
  is_prerelease:
    description: Is version a prerelease? 
    value: ${{ contains(steps.tag.outputs.is_prerelease, '1') && 'true' || 'false' }}
  deploy: 
    description: Deployable
    value: ${{ steps.branch.outputs.deploy }}

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.NODE_VERSION }}

    - shell: bash
      run: |
        npm install -g semver

    - shell: bash
      id: branch
      name: gather branch information
      run: |
        if [ $truncate == "1" ]; then
          prerelease=$(echo $prerelease_suffix | sed 's/\([a-zA-Z0-9]\+\).*/\1/g')
        else
          prerelease=$(echo $prerelease_suffix | sed 's/[^a-zA-Z0-9]/-/g')
        fi

        echo "deploy=${{ (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || contains(github.event.head_commit.message, '#deploy_branch')) && 'true' || 'false' }}" >> $GITHUB_OUTPUT
        echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

      env:
        truncate: ${{ contains(inputs.TRUNCATE_PRERELEASE, 'false') && '0' || '1' }}
        prerelease_suffix: ${{ inputs.prerelease_suffix || github.head_ref || github.ref_name }}

    - shell: bash
      name: get latest version tags
      id: latest_tag
      run: |
        taglist=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^$major\.[0-9]+\.[0-9]+$" || echo "" | xargs)
      
        if [[ -n "${taglist/[ ]*\n/}" ]]; then
          semver_tag=$(semver $taglist | tail -n 1)
          tag=$(echo $taglist | sed 's/\s/\n/g' | grep $semver_tag)
        fi

        pre_taglist=$(git for-each-ref --sort=-v:refname --format '%(refname:lstrip=2)' | grep -E "^$major\.[0-9]+\.[0-9]+(-$prerelease\.[0-9]+)$" || echo "" | xargs)
        
        if [[ -n "${pre_taglist/[ ]*\n/}" ]]; then
          semver_pre_tag=$(semver $pre_taglist | tail -n 1)
          pre_tag=$(echo $pre_taglist | sed 's/\s/\n/g' | grep $semver_pre_tag)
        fi

        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "pre_tag=$pre_tag" >> $GITHUB_OUTPUT
      env:
        prerelease: ${{ steps.branch.outputs.prerelease }}
        initial_version: ${{ inputs.MAJOR && format('{0}.0.0', inputs.MAJOR) || inputs.INITIAL_VERSION }}
        major: ${{ inputs.MAJOR && format('v?{0}', inputs.MAJOR) || 'v?[0-9]+'  }}

    - shell: bash
      name: get new version tag
      id: tag
      run: |
        if [ -z "$tag" ]
        then
            if [ $is_pr == "1" ]; then
              log=$(git log origin/${{ inputs.DEFAULT_BRANCH }}...${{ github.event.after }} --pretty='%B')
            else
              log=$(git log ${{ github.event.before }}...origin/${{ inputs.DEFAULT_BRANCH }}  --pretty='%B')
            fi

            tag="$initial_version"
            if [ -z "$pre_tag" ] && $pre_release
            then
              pre_tag="$initial_version"
            fi
        else
            log=$(git log $tag..HEAD --pretty='%B')
        fi

        case "$log" in
          *BREAKING\ CHANGE:* ) new=$(semver -i $semver_arg_major $tag); part="major";;
          *#major* ) new=$(semver -i $semver_arg_major $tag); part="major";;
          *feat:* ) new=$(semver -i minor $tag); part="minor";;
          *#minor* ) new=$(semver -i minor $tag); part="minor";;
          *fix:* ) new=$(semver -i patch $tag); part="patch";;
          *#patch* ) new=$(semver -i patch $tag); part="patch";;
          * ) new=$(semver -i "${default_semvar_bump}" $tag); part=$default_semvar_bump 
        esac

        if [ $is_pr == "1" ]; then
          if [[ "$pre_tag" == *"$new"* ]]; then
              new=$(semver -i prerelease $pre_tag --preid $prerelease); part="pre-$part"
          else
              new="$new-$prerelease.$initial_build_number"; part="pre-$part"
          fi
        fi

        echo "major=$(echo $new | sed -nr "s/^v?([0-9]+).*/\1/p")" >> $GITHUB_OUTPUT
        echo "minor=$(echo $new | sed -nr "s/^v?[0-9]+\.([0-9]+).*/\1/p")" >> $GITHUB_OUTPUT
        echo "with_v=$with_v" >> $GITHUB_OUTPUT
        echo "new_tag=$new" >> $GITHUB_OUTPUT
        echo "part=$part" >> $GITHUB_OUTPUT
        echo "is_prerelease=$is_pr" >> $GITHUB_OUTPUT
      env:
        tag: ${{ steps.latest_tag.outputs.tag }}
        pre_tag: ${{ steps.latest_tag.outputs.pre_tag }}
        initial_version: ${{ inputs.MAJOR && format('{0}.0.0', inputs.MAJOR) || inputs.INITIAL_VERSION }}
        semver_arg_major: ${{ inputs.MAJOR && 'minor' || 'major' }}
        default_semvar_bump: ${{ inputs.DEFAULT_BUMP }}
        with_v: ${{ contains(inputs.WITH_V, 'true') && 'v' || '' }}
        is_pr: ${{ github.ref == format('refs/heads/{0}', inputs.DEFAULT_BRANCH) && '0' || '1' }}
        prerelease: ${{ steps.branch.outputs.prerelease }}
        initial_build_number: ${{ inputs.INITIAL_BUILDNUMBER || github.run_number || '1' }}

    - shell: bash
      name: output
      run: |
        echo "tag: ${{ steps.latest_tag.outputs.pre_tag || steps.latest_tag.outputs.tag  }}"
        echo "new_tag: ${{ steps.tag.outputs.new_tag }}"
        echo "major: ${{ steps.tag.outputs.major }}"
        echo "minor: ${{ steps.tag.outputs.minor }}"
        echo "with_v: ${{ steps.tag.outputs.with_v }}"
        echo "part: ${{ steps.tag.outputs.part }}"
        echo "prerelease: ${{ steps.branch.outputs.prerelease }}"
        echo "deploy: ${{ steps.branch.outputs.deploy }}"
